const c=new Map,w=(n,o)=>{c.has(n)||c.set(n,new Map);const a=c.get(n);if(a.has(o))return a.get(o);const i=o.split("/").slice(1);let r=n;for(const f of i)(!r||typeof r!="object")&&(r=null),r=r[f]??null;return a.set(o,r),r},p="$[Circular Reference]",l=new Map,y=n=>n!==null&&typeof n=="object",d=async(n,o=[])=>{if(l.has(n))return l.get(n);const a=structuredClone(n),i=new Set,r=async(t,g)=>{if(y(t)){if(i.has(t))return p;if(i.add(t),Array.isArray(t))for(let e=0;e<t.length;e++)t[e]=await r(t[e]);else{if("$ref"in t&&typeof t.$ref=="string"){for(const u of o){const s=await u(t.$ref);if(s)return await r(s)}const e=await w(a,t.$ref);return await r(e)}for(const e in t)t[e]=await r(t[e])}i.delete(t)}return t},f=await r(a);return l.set(n,f),f};export{p,d as v};
//# sourceMappingURL=index-TaRXY2w1-CdxtyWRr.js.map
